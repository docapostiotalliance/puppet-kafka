# Author::    Idriss Neumann  (mailto:lbennett@opentable.com)
# Copyright:: Copyright (c) 2018
# License::   MIT

# == Resource: kafka::mirror::rmirror
#
# This private resource is meant to be called from `kafka::mirror`.
# It manages the mirror-maker config files
#
define kafka::mirror::rmirror(
  String $version                            = $kafka::params::version,
  String $scala_version                      = $kafka::params::scala_version,
  Stdlib::Absolutepath $install_dir          = $kafka::params::install_dir,
  Stdlib::HTTPUrl $mirror_url                = $kafka::params::mirror_url,
  Boolean $install_java                      = $kafka::params::install_java,
  Stdlib::Absolutepath $package_dir          = $kafka::params::package_dir,
  Optional[String] $package_name             = $kafka::params::package_name,
  String $package_ensure                     = $kafka::params::package_ensure,
  String $user                               = $kafka::params::user,
  String $group                              = $kafka::params::group,
  Optional[Integer] $user_id                 = $kafka::params::user_id,
  Optional[Integer] $group_id                = $kafka::params::group_id,
  Boolean $manage_user                       = $kafka::params::manage_user,
  Boolean $manage_group                      = $kafka::params::manage_group,
  Stdlib::Filemode $config_mode              = $kafka::params::config_mode,
  Stdlib::Absolutepath $config_dir           = $kafka::params::config_dir,
  Stdlib::Absolutepath $log_dir              = $kafka::params::log_dir,
  Stdlib::Absolutepath $bin_dir              = $kafka::params::bin_dir,
  String $service_name                       = $kafka::params::mirror_service_name,
  Boolean $service_install                   = $kafka::params::service_install,
  Enum['running', 'stopped'] $service_ensure = $kafka::params::service_ensure,
  Boolean $service_restart                   = $kafka::params::service_restart,
  Array[String] $service_requires            = $kafka::params::service_requires,
  Optional[String] $limit_nofile             = $kafka::params::limit_nofile,
  Optional[String] $limit_core               = $kafka::params::limit_core,
  Hash $env                                  = $kafka::params::env,
  Hash $consumer_config                      = $kafka::params::consumer_config,
  Hash $producer_config                      = $kafka::params::producer_config,
  Hash $service_config                       = $kafka::params::service_config,
  String $heap_opts                          = $kafka::params::mirror_heap_opts,
  String $jmx_opts                           = $kafka::params::mirror_jmx_opts,
  String $log4j_opts                         = $kafka::params::mirror_log4j_opts,
) {
  class {'::kafka::mirror':
    mirror_name      => $title,
    version          => $version,
    scala_version    => $scala_version,
    install_dir      => $install_dir,
    mirror_url       => $mirror_url,
    install_java     => $install_java,
    package_dir      => $package_dir,
    package_name     => $package_name,
    package_ensure   => $package_ensure,
    user             => $user,
    group            => $group,
    user_id          => $user_id,
    group_id         => $group_id,
    manage_user      => $manage_user,
    manage_group     => $manage_group,
    config_mode      => $config_mode,
    config_dir       => $config_dir,
    log_dir          => $log_dir,
    bin_dir          => $bin_dir,
    service_name     => $service_name,
    service_install  => $service_install,
    service_ensure   => $service_ensure,
    service_restart  => $service_restart,
    service_requires => $service_requires,
    limit_nofile     => $limit_nofile,
    limit_core       => $limit_core,
    env              => $env,
    consumer_config  => $consumer_config,
    producer_config  => $producer_config,
    service_config   => $service_config,
    heap_opts        => $heap_opts,
    jmx_opts         => $jmx_opts,
    log4j_opts       => $log4j_opts,
  }
}
